{
  "home": {
    "reactWiki": "React Wiki",
    "warningBox": "<b>This Wiki is intended for people who already have some knowledge with React</b> but for various reasons have forgotten some of its features or need to strengthen them.",
    "introduction": "Introduction",
    "introductionDetails": "Here we will find several examples to know how to use the main advantages of React.<br><br>Keep in mind that for reasons of incompatibility the braces have had to be removed from the example code boxes and it is not completely faithful to how it really has to be written.<br><br>If you need it, you can always refer to the original code at:<br><br>",
    "gitHub": "GitHub",
    "sandBox": "SandBox",
    "infoBoxTitle": "What is React?",
    "infoBox": "'React' technology, also known as 'React.js' or simply 'React', is a JavaScript library developed by Facebook. It is used to build interactive and reusable user interfaces in web applications. React is focuses on creating reusable components that represent different parts of the user interface and its state.<br><br>The main feature of React is its focus on building user interfaces using components. React is a self-contained unit that can contain its own logic and state, and can be rendered to the UI based on state updates, allowing for the creation of modular and scalable user interfaces.<br><br>React uses a programming model called the 'Virtual DOM', which is an in-memory representation of the current UI structure When a component's state changes, React generates a virtual DOM update instead of manipulating it directly the DOM of the browser. It then compares this virtual update to the previous version to determine the actual changes that need to be applied to the actual DOM. This optimization technique helps improve the performance and efficiency of applications.<br><br>React is very popular in modern web development and is often combined with other libraries and tools to build complete applications. To manage application state in React, solutions like 'Redux' or 'Mobx' can be used. In addition, React can be integrated with web development frameworks such as 'React Router' to handle navigation and 'Axios' to make HTTP requests.<br><br>In short, React is a technology that allows you to build interactive user interfaces and dynamics in web applications through reusable components and an efficient approach to DOM manipulation."
  },
  "hooks": {
    "useEffect": {
      "title": "useEffect",
      "infoBox": "With the <b>useEffect</b> hook what we are telling React is that the component <b>has to do something after rendering</b>.<br><b>The component it will be re-rendered if we change its state</b> and with that it will execute the useEffect again.<br><b>We can prevent this from happening by adding an empty array</b> as the second value <b>or by re-rendering execute the useEffect only if a specific state changes by putting it in said array</b>.<br>We can also make <b>something happen once the component is dismantled</b> in order to free memory or any other type function, we will do this by <b>returning the useEffect function itself.</b><br><br>In this validation example we are making use of the <b>useEffect</b> hook to perform validations only when changes the status of mail and password (These change as it is written), but in order not to check the validation while it is being written we are applying a setTimeout and cleaning it every time it is written again (Thanks to the return of the hook)<br><br >This is just an example to see how the useEffect works, but for a case like this it would be more optimal to use the hook"
    },
    "useMemoAndUseCallback": {
      "title": "useMemo and useCallback",
      "infoBox": "When we have very heavy components and they are rendered unnecessarily, it can affect the performance of our application.<br><br>In order not to re-render the child element if the parent is rendered again, we use the <b>React function. memo(element)</b>.<br><b>The element will only be rendered when its props are changed</b>.<br><br>In addition to this component we are passing the array numbers from the parent using the prop exampleArray using the <b>useMemo</b> hook.<br>We also pass it the function changeParentName, to change the state of the parent from the child using the <b>useCallback</b> hook.<br><br >You have to use these hooks because you have to keep in mind that whether we pass <b>array, object or method props</b>, these <b>are not JavaScript primitive values</b>, and these are <b>thought to be different</b> even though they haven't really changed and so we must memorize them with these hooks.<br><br>Thanks to the <b>react developers tools</b> extension and checking in its setting '<b>Highlight updates when components render</b>' we can check which components render as we interact with them.<br>You can also help by looking at the console logs."
    },
    "useReducer": {
      "title": "useReducer",
      "infoBox1st": "With the <b>useReducer</b> hook we have a use of the vitamin state for more complex executions.<br>We can take a look at this schematic to understand how it works:<br>",
      "infoBox2nd": "<br>In this case we are validating the email and the password by useReducer and we make use of the useEffect to enable or disable the button only in case the validation status changes, inspect the project code to see its operation."
    }
  },
  "libraries": {
    "redux": {
      "reduxBasic": {
        "title": "Basic Redux",
        "warningBox": "To be able to use this component it is necessary to <b>use the basic store</b>, changing in <b>src/index.js</b> line 16 <b>storeReduxToolkit to storeReduxbasic</b >.",
        "infoBox1st": "<p>Each component can have its own state that changes over time, for example the number of likes on a post or user information.<br><br>However, when As your app grows, <b>keeping track of all these states can get tricky</b>, this is where <b>Redux</b> comes in to help you out:</p><ul><li><b>Store (Store) </b>: Think of the Redux store as a big container for all the important states of your application. It's like a central place where you keep relevant information, such as user information, posts, etc. .</li><li><b>Actions</b>: Actions in Redux are like requests to change something in your store, for example if someone clicks a 'Like' button, that generate an 'action' to increase the 'like' counter.Actions are little objects that describe what happened.</li><li><b>Reducers</b>: Reducers are like people responsible for processing those actions and making changes in the warehouse. They take action and update the state based on what should change. For example, a reducer will take the 'Increase Likes' action and adjust the number of likes in the store state. </li><li><b>Dispatch </b>: It's like telling Redux that something happened and it should handle it. For example, when someone clicks a button, you can 'dispatch' an action, which will then be handled by reducers to update the state in the store. </li><li><b>Subscribe </b>: You can 'subscribe' specific components to the soulRedux cen. This means that those components will be notified whenever the status in the store changes. This way, you can automatically update the UI to match the current state. </li></ul><p>In short, Redux works together with React to help you manage the state of your application in a more organized and predictable way. It gives you a clear structure for managing state changes, which is especially useful when your application becomes larger and more complex.<br><br>In order to use it we must:</p><ul><li><b >Install</b> the npm packages <b>redux and react-redux</b></li><li><b>Import the Provider</b> Redux and <b>wrap the components</b> .</li><li><b>Create our Store and pass it as an attribute in the Provider component</b></li><li><b>Use useSelector, useDispatch</b> of react-redux in the components where we want to change the Redux state</li></ul><p>As an important note to know that our Reducers must always return the entire object again, this can lead to our file being too large and difficult to maintain is therefore, to facilitate our task, we now have at our disposal</p>",
        "infoBox2nd": "As an important note to know that our Reducers must always return the entire object again, this can lead to our file being too large and difficult to maintain, so to make it easier for us now we have at our disposal"
      },
      "reduxToolkit": {
        "title": "Redux Toolkit",
        "warningBox": "If the component does not work, remember that in order to use this component it is necessary to <b>use the store toolkit</b>, changing line 16 in <b>src/index.js</b> <b >storeReduxbasic by storeReduxToolkit</b>.",
        "infoBox": "<p>Redux Toolkit is a set of tools and utilities designed to make the Redux development process more efficient, easier, and less error prone. It was created by the same team that developed Redux and is intended to simplify many of the common tasks involved in setting up and managing a Redux store.<br><br>The Redux Toolkit offers several features and benefits that make it easier to develop applications using Redux:</p><ul><li><b>Simplified configuration:</b> The Redux Toolkit provides a function called configureStore() that simplifies the initial configuration of your Redux store.This function incorporates recommended configurations and features, such as automatic immutability and handling of thunk callback (for asynchronous actions).</li><li><b>Actions and reducers simplified:</b> The Redux Toolkit offers a createSlice() function that combines the definition of actions and reducers into a single function . This eliminates much of the code repetition that often occurs when defining actions and reducers separately.</li><li><b>Automatic handling of immutability:</b> The Redux Toolkit uses the 'Immer' library to simplify the creation of new immutable states. This means that you can modify the state as if it were mutable, and the Redux Toolkit will take care of creating an immutable copy automatically.</li><li><b>DevTools Integration:</b> Redux DevTools is a very useful tool for debug and trace the state and actions in your application. The Redux Toolkit includes the DevTools configuration by default, making it easier to integrate and use.</li><li><b>Better support for asynchronous actions:</b> The Redux Toolkit includes the ability to handle asynchronous actions more easily using the 'Redux Thunk' middleware and other approaches, making it easier to perform asynchronous operations such as API calls.</li></ul>"
      }
    },
    "routerDom": {
      "dynamicRoutes": {
        "title": "Dynamic Routes",
        "infoBox": "We are taking advantage of this example to add a search engine and navigate through the button to the image indicated in the form, in turn <strong>dynamic URLs </strong> are also added in the <strong>App.js< /strong><br><br>As can be seen in the code, the dynamic part will be indicated by a colon plus the name that we want to put in the dynamic part."
      },
      "simpleRoutes": {
        "title": "Simple Links",
        "infoBox": "We use the npm package <strong>react-router-dom</strong> in order to take advantage of the single page application.<br><br> The necessary components <strong>Link, Routes and Routes must be imported Route</strong>, where <strong>Routes</strong> is the area where the components will be rendered according to their URL",
        "linkExample": "Example Link"
      }
    }
  },
  "others": {
    "apis": {
      "title": "APIs",
      "infoBox": "We use JavaScript asynchronous <b>async</b> functions to make requests to APIs, we will make the requests with <b>fetch</b> functions adding the <b>await</b> in front of it- <br>For possible states such ass errors we must wrap with <b>try</b> all the data code and with <b>catch</b> we can find the different responses of the request.<br><br>This type of code is our own JavaScript for more specific information you can consult the mdn web docs &nbsp;<a href='https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/async_function' target='_blank' rel='noreferrer'>async functions</a> and the &nbsp;<a href='https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/try...catch' target ='_blank' rel='noreferrer'>try...catch</a>.<br><br>This example was done with <a href='https://console.firebase.google.com /' target='_blank' rel='noreferrer'>Firebase</a> and it may stop working in the near future.<br>If necessary, keep in mind to create an account on that page and change the variable of the <b>URLAPI</b> component"
    },
    "contexts": {
      "title": "Contexts",
      "infoBox": "With the <strong>Context provider</strong> I can have saved values and change their state between multiple components without having to pass properties to them. Similar to the famous Redux.<br><br>In this example we are using the context provider combined with the useState to save the information of the images, so when we go to their detail we will not make a call to the API to render them since we will have already saved a global context to consult it.<br><br>How can it be done appreciate in the code the context has to wrap all the components where you want to read"
    },
    "moduleCSS": {
      "title": "ModuleCSS",
      "infoBox": "Thanks to <b>modular CSS styles</b> we can make the styles apply to a single component <b>avoiding unwanted propagation</b>.<br><br>To do this <b>it is necessary that the CSS file ends in .module.css</b> in this example we use 'LoginUseEffect.module.css' We name the variable that imports it and we use it in our HTML.<br><br >Inspect the project code to see how the modular styles are applied."
    },
    "lazyComponent": {
      "title": "Lazy Component",
      "infoBox": "If we open the browser console we can verify that the message of the component '<b>loading the lazy component</b>' will not appear, until the scroll arrives to show it, this is thanks to the class < b>IntersectionObserver</b>.<br><br>We are observing the box that surrounds the component using a React reference thanks to its <b>useRef()</b> method.<br><br>For performance We must always disconnect from the observation with the <b>disconnect() </b> method when we no longer have to use it.<br><br>On the other hand, we can also see how the object properties are updated in the console with a lot of information that we can use according to our needs."
    }
  }
}